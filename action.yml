name: Update Gruntwork Pipelines PR Status
description: "Update Gruntwork Pipelines PR Status"
inputs:
  step_name:
    description: "The name of the step to update. Combined with step_working_directory to form a unique key for this update"
  step_working_directory:
    description: "The working directory where the update is happening. Combined with step_name to form a unique key for this update"
  step_status:
    description: "The status of the step to update"
    default: "not_started"
  step_details_preview:
    description: "Preview Text for details"
    default: "Output"
  step_details:
    description: "Details or output from the step"
    default: ""
  first_update:
    description: "Set this to 'true' on the very first update in a pipeline run to avoid spurious artifact action errors"
    default: "false"
  pull_request_number:
    description: "The Pull request to update"
    required: false
  summary_status:
    description: "A summary of the overall status of the pipeline"
    required: false
  orchestrate_jobs:
    description: "The output of pipelines orchestrate, used to scaffold the status update"
    required: false
    default: ''
  step_details_extended:
    description: ""
    required: false
    default: ""

runs:
  using: composite
  steps:
    - name: Set up mutex
      id: mutex
      uses: gruntwork-io/gh-action-mutex@main

    - name: Download artifact
      uses: actions/download-artifact@v4
      if: inputs.first_update != 'true'
      continue-on-error: true
      with:
        name: state

    - name: Sanitize the name
      id: step_name
      shell: bash
      env:
        ACTION_PATH: ${{ github.action_path }}
        STEP_NAME: ${{ inputs.step_name }}
      run: "$ACTION_PATH/scripts/sanitize-name.sh"

    - name: Calculate Initial State from Jobs
      if: inputs.orchestrate_jobs != ''
      shell: bash
      env:
        ACTION_PATH: ${{ github.action_path }}
        ORCHESTRATE_JOBS: ${{ inputs.orchestrate_jobs }}
      run: "$ACTION_PATH/scripts/calculate-initial-state.sh"

    - name: Write step_details_extended to disk
      shell: bash
      if: inputs.step_details_extended != ''
      run: |
        cat <<EOF > step-details-extended.log
        ${{ inputs.step_details_extended }}
        EOF

    - name: Calculate Table
      id: calculate
      shell: bash
      env:
        ACTION_PATH: ${{ github.action_path }}
        IS_PLAN: ${{ github.event_name == 'pull_request' }}
        STEP_STATUS: ${{ inputs.step_status }}
        RUNNER_TEMP: ${{ runner.temp }}
        STEP_DETAILS: ${{ inputs.step_details }}
        STEP_DETAILS_JSON: ${{ toJson(inputs.step_details) }}
        FORMATTED_NAME: ${{ steps.step_name.outputs.formatted_name }}
        STEP_WORKING_DIRECTORY: ${{ inputs.step_working_directory }}
        STEP_DETAILS_PREVIEW: ${{ inputs.step_details_preview }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        PR_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        SUMMARY_STATUS: ${{ inputs.summary_status }}
        FORMATTED_STEP_NAME: ${{ steps.step_name.outputs.formatted_name }}
      run: "$ACTION_PATH/scripts/calculate-table.sh"

    - name: Create comment
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || 'apply' }}
        path: ${{ steps.calculate.outputs.tmpfile }}
        # Action will only use this PR number if it is unable to find the PR number in the PR GitHub event i.e when the PR is merged
        number: ${{ inputs.pull_request_number }}

    - name: Upload data as artifact
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: state
        path: state.json
        overwrite: true

    - name: Release the lock
      if: always()
      uses: gruntwork-io/gh-action-mutex@main
      with:
        action: unlock
        ticket_id: ${{ steps.mutex.outputs.ticket_id }}
