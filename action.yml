name: Update Gruntwork Pipelines PR Status
description: "Update Gruntwork Pipelines PR Status"
inputs:
  step_name:
    description: "The name of the step to update"
    required: true
  step_status:
    description: "The status of the step to update"
    default: 'not_started'
  step_details_preview:
    description: 'Preview Text for .details'
    default: 'Output'
  step_details:
    description: "Details or output from the step"
    default: ''

runs:
  using: composite
  steps:
    - name: Set up mutex
      id: mutex
      uses: gruntwork-io/gh-action-mutex@main

    - name: Download artifact
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: state

    - name: Calculate Table
      id: calculate
      shell: bash
      run: |
        function statusToIcon() {
          status=$1
          if [[ "$status" = "not_started" ]]; then
            echo "⚪"
            return
          fi
          if [[ "$status" = "in_progress" ]]; then
            echo "🔄"
            return
          fi
          if [[ "$status" = "success" ]]; then
            echo "✅"
            return
          fi
          if [[ "$status" = "failed" ]]; then
            echo "❌"
            return
          fi
          echo $status
        }
        if [[ ! -f "state.json" ]]; then
          echo '{}' > state.json
        fi
        icon=$(statusToIcon ${{ inputs.step_status }})
        TMPFILE=${{ runner.temp }}/message.txt
        echo '${{ toJson(inputs.step_details) }}' > details.json
        if [[ -z '${{ inputs.step_details }}' ]]; then
          echo "setting details to empty json..."
          echo '""' > details.json
        fi
        echo "details:"
        cat details.json
        echo "building new json object.."
        NEWJSON=$(jq '{ "${{ inputs.step_name }}": { "name": "${{ inputs.step_name }}", "status": "${{ inputs.step_status }}", "statusIcon": "'$icon'", "details_preview": "${{ inputs.step_details_preview }}", "details": . }}' details.json)
        echo $NEWJSON
        echo "building new state..."
        jq ". + $NEWJSON" state.json > updated_state.json
        cat state.json
        cat updated_state.json
        mv updated_state.json state.json
        echo "## Gruntwork Pipelines Status" > $TMPFILE
        echo "<table><tr><th>Step</th><th>Status</th><th>Output</th></tr>" >> $TMPFILE
        IFS=$'\n'
        for item in $(cat state.json | jq -c '. | values[]'); do
            echo "single item..."
            echo $item
            name=$(echo "$item" | jq -r '.name')
            statusIcon=$(echo "$item" | jq -r '.statusIcon')
            details=$(echo "$item" | jq -Rs '.details')
            details_preview=$(echo "$item" | jq -r '.details_preview')

            if [[ -z "$details" ]]; then
              echo "<tr><td>$name</td><td>$statusIcon</td><td></td></tr>" >> $TMPFILE
            else
              echo "<tr><td>$name</td><td>$statusIcon</td><td><details><summary>$details_preview</summary>$details</details></td></tr>" >> $TMPFILE
            fi

        done
        echo "</table>" >> $TMPFILE
        cat $TMPFILE
        echo "tmpfile=$TMPFILE" >> "$GITHUB_OUTPUT"


    - name: Create comment
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        path: ${{ steps.calculate.outputs.tmpfile }}

    - name: Upload data as artifact
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: state
        path: state.json
        overwrite: true

    - name: Release the lock
      uses: gruntwork-io/gh-action-mutex@main
      with:
        action: unlock
        ticket_id: ${{ steps.mutex.outputs.ticket_id }}
